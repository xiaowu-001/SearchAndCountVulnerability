import json
import os

from bs4 import BeautifulSoup
from lxml import etree
from requests.utils import requote_uri
from urllib.request import urlopen
import re
import base.FileOperation as FileOperation
import base.SpiderOperation as SpiderOperation
import WebsIteHandle.Config_Setting as UserConfig

# 检查单词唯一性，不是其他单词连接的 by wu_t2 2022-08-01
def CheckWordUniq(name, Vul_descript):
    next_word_index = -1
    prev_word_index = -1
    if Vul_descript.find(name) > 0:
        prev_word_index = Vul_descript.find(name) - 1
    if Vul_descript.find(name) < len(Vul_descript) - len(name):
        next_word_index = Vul_descript.find(name) + len(name)
    nextword = Vul_descript[next_word_index]
    prevword = Vul_descript[prev_word_index]
    #头尾是单词，-,_均不属于完整单词
    if ((next_word_index != -1 and (nextword.isalpha() or nextword == '-' or nextword == '_')) or (prev_word_index != -1 and (prevword.isalpha() or prevword == '-' or prevword == '_'))) and len(name) < 5:
    # if ((next_word_index != -1 and nextword.isalpha()) or (prev_word_index != -1 and prevword.isalpha())):
        return bool(0)
    return bool(1)

#收集CNNVD_byxml数据 by wu_t2 2022-08-01
def DealCNNVDData_ByXML(list):
    xmlFolder = UserConfig.CNNVD_DIRECTORY_PATH
    xmlFiles = os.listdir(xmlFolder)
    totalsize = len(xmlFiles)
    i = 0
    # file_path = 'C:/FOSS/CNVD_download/2022-07-18_2022-07-24.xml'
    for file in xmlFiles:
        i = i + 1
        print("Collecting No." + str(i) + ", total is " + str(totalsize))
        if file.endswith('.xml'):
            file_path = xmlFolder + file
            print(file_path)
            parser = etree.HTMLParser(encoding="utf-8")  #存在utf-8格式
            root = etree.parse(file_path, parser=parser).getroot()
            for child in root.getchildren():
                if "body" in child.tag:
                    for body in child:
                        for cnnvd_info in body:
                            Vul_name = UserConfig.OSSVUL_VULNERABILITYNAME_DEFAULT
                            Vul_CNNVDID = UserConfig.OSSVUL_VULNERABILITYCNNVDID_DEFAULT
                            Vul_CVEID = UserConfig.OSSVUL_VULNERABILITYCVEID_DEFAULT
                            Vul_risk = UserConfig.OSSVUL_VULNERABILITYRISK_DEFAULT
                            Vul_Updatedate = UserConfig.OSSVUL_VULNERABILITYUPDATETIME_DEFAULT
                            Vul_notice = UserConfig.OSSVUL_VULNERABILITYNOTICE_DEFAULT
                            Vul_type = UserConfig.OSSVUL_VULNERABILITYTYPE_DEFAULT
                            Vul_releasedate = UserConfig.OSSVUL_VULNERABILITYRELEASETIME_DEFAULT
                            Vul_descript = UserConfig.OSSVUL_VULNERABILITYDESCRIB_DEFAULT
                            # 获取漏洞名字，CVEID, CNVDID, CNNVDID,漏洞风险,漏洞描述，发布时间,更新时间,补丁公告,漏洞类型
                            name = cnnvd_info.find("name")
                            cnnvdid = cnnvd_info.find("vuln-id")
                            releasedate = cnnvd_info.find("published")
                            updatedate = cnnvd_info.find("modified")
                            severity = cnnvd_info.find("severity")
                            vul_type = cnnvd_info.find("vuln-type")
                            description = cnnvd_info.find("vuln-descript")
                            vul_solve = cnnvd_info.find("vuln-solution")
                            cveid = None
                            if cnnvd_info.find("other-id") is not None:
                                cveinfo = cnnvd_info.find("other-id")
                                if cveinfo.find("cve-id") is not None:
                                    cveid = cveinfo.find("cve-id")
                            if name is not None:
                                Vul_name = name.text
                            if cnnvdid is not None:
                                Vul_CNNVDID = cnnvdid.text
                            if releasedate is not None:
                                Vul_releasedate = releasedate.text
                            if updatedate is not None:
                                Vul_Updatedate = updatedate.text
                            if severity is not None:
                                Vul_risk = severity.text
                            if vul_type is not None:
                                Vul_type = vul_type.text
                            if description is not None:
                                Vul_descript = description.text
                            if cveid is not None:
                                Vul_CVEID = cveid.text
                            if vul_solve is not None:
                                Vul_notice = vul_solve.text
                            Vulinfo = [Vul_name, Vul_CVEID, UserConfig.OSSVUL_VULNERABILITYCNVDID_DEFAULT, Vul_CNNVDID,
                                       Vul_risk, Vul_descript, Vul_releasedate, Vul_Updatedate, Vul_notice, Vul_type,
                                       UserConfig.OSSVUL_VULNERABILITYTHREAT_DEFAULT]
                            print(Vulinfo)
                            for lib_info in list:
                                name = lib_info[1]
                                name = re.escape(name)
                                isinclude = re.search(name, Vul_descript, re.IGNORECASE)
                                if len(Vul_descript) > 0 and isinclude:
                                    if "kernel" in name:
                                        islinux = re.search("linux", Vul_descript, re.IGNORECASE)
                                        if islinux:
                                            isallowwrite = bool(1)
                                        else:
                                            isallowwrite = bool(0)
                                    else:
                                        isallowwrite = bool(1)
                                    #写入漏洞模板
                                    if CheckWordUniq(name, Vul_descript) and isallowwrite:
                                        # 判断更新时间是否小于6个月
                                        if FileOperation.CheckUpdateTime(Vulinfo) <= UserConfig.SEARCH_TIMESPAN:
                                            writefile_name = UserConfig.OSSVULFILE_PATH
                                            FileOperation.writeVulinfo(writefile_name, lib_info, Vulinfo, 'CNNVD')
                                    # else:
                                    #     print(f'{name}/{Vul_descript}Not a related vulnerability')
        else:
            print(f'{xmlFolder}/{file} seems not to be an Excelfile')


#收集CNNVD数据 by wu_t2 2022-08-01
def DealCNNVDData(list):
    # 设置下载内容文件夹路径
    txtFolder = UserConfig.CNNVD_DIRECTORY_PATH
    txtFiles = os.listdir(txtFolder)
    totalsize = len(txtFiles)
    i = 0
    for txtfile in txtFiles:
        i = i + 1
        print("Collecting No." + str(i) + ", total is " + str(totalsize))
        line_start = bool(0)
        Vul_name = ''
        Vul_CVEID = ''
        Vul_CNNVDID = ''
        Vul_risk = ''
        Vul_descript = ''
        Vul_releasedate = ''
        Vul_Updatedate = ''
        Vul_notice = ''
        Vul_type = ''
        Vul_info = ''
        Vul_threattype = ''
        if txtfile.endswith('.txt'):
            path = txtFolder + txtfile
            # 获取漏洞名字，CVEID, CNVDID, CNNVDID,漏洞风险,漏洞描述，发布时间,更新时间,补丁公告,漏洞类型
            with open(path, encoding='utf-8') as file:
                try:
                    for line in file:
                        if line_start is True:
                            Vul_info = Vul_info + line.strip()
                        if 'detail_xq w770' in line:
                            line_start = bool(1)
                except StopIteration:
                    pass
            # print(Vul_info)
            if len(Vul_info) > 0:
                # 截取漏洞名称
                start = Vul_info.find("<h2>")
                end = Vul_info.find("</h2>")
                Vul_name = Vul_info[start+4:end]
                # CNNVDID
                start = Vul_info.find("CNNVD编号：")
                end = Vul_info.find("</span>")
                Vul_CNNVDID = Vul_info[start+8:end]
                # 截取漏洞风险
                start = Vul_info.find("style")
                end = Vul_info.find("<img")
                Vul_infotorisk = Vul_info[start:end]
                start = Vul_infotorisk.find("\" >")
                Vul_risk = Vul_infotorisk[start+3:len(Vul_infotorisk)]
                if len(Vul_risk) == 0:
                    Vul_risk = UserConfig.OSSVUL_VULNERABILITYRISK_DEFAULT
                # CVEID
                start = Vul_info.find("CVE编号：")
                Vul_info = Vul_info[start:len(Vul_info)]
                start = Vul_info.find("\"> ")
                end = Vul_info.find("</a>")
                Vul_CVEID = Vul_info[start + 3:end]
                if len(Vul_CVEID) == 0:
                    Vul_CVEID = UserConfig.OSSVUL_VULNERABILITYCVEID_DEFAULT
                # 截取漏洞类型
                start = Vul_info.find("漏洞类型：")
                Vul_info = Vul_info[start:len(Vul_info)]
                start = Vul_info.find(";\">")
                end = Vul_info.find("</a></li>")
                Vul_type = Vul_info[start + 3:end]
                if len(Vul_type) == 0:
                    Vul_type = UserConfig.OSSVUL_VULNERABILITYTYPE_DEFAULT
                # 截取漏洞发布时间
                start = Vul_info.find("发布时间")
                Vul_info = Vul_info[start:len(Vul_info)]
                start = Vul_info.find("\" >")
                end = Vul_info.find("</a>")
                Vul_releasedate = Vul_info[start + 3:end]
                # 截取威胁类型
                start = Vul_info.find("威胁")
                Vul_info = Vul_info[start:len(Vul_info)]
                start = Vul_info.find("\" >")
                end = Vul_info.find("</a></li>")
                Vul_threattype = Vul_info[start + 3:end]
                if len(Vul_threattype) == 0:
                    Vul_threattype = UserConfig.OSSVUL_VULNERABILITYTHREAT_DEFAULT
                # 截取漏洞更新时间
                start = Vul_info.find("更新时间")
                Vul_info = Vul_info[start:len(Vul_info)]
                start = Vul_info.find("\">")
                end = Vul_info.find("</a>")
                Vul_Updatedate = Vul_info[start + 2:end]
                if len(Vul_Updatedate) == 0:
                    Vul_Updatedate = UserConfig.OSSVUL_VULNERABILITYUPDATETIME_DEFAULT
                # 截取漏洞描述
                start = Vul_info.find("漏洞简介")
                Vul_descript_all = Vul_info[start:len(Vul_info)]
                while len(Vul_descript_all) > 0:
                    start = Vul_descript_all.find("m\">")
                    end = Vul_descript_all.find("</p>")
                    if start != -1 and end != -1:
                        Vul_descript = Vul_descript + Vul_descript_all[start + 3:end]
                        Vul_descript_all = Vul_descript_all[end + 4:len(Vul_descript_all)]
                        start = Vul_descript_all.find("m\">")
                        end = Vul_descript_all.find("</div>")
                        if start != -1 and end != -1 and start > end:
                            break
                    else:
                        break
                # 截取漏洞公告
                start = Vul_info.find("漏洞公告</h2>")
                Vul_notice_all = Vul_info[start:len(Vul_info)]
                start = Vul_notice_all.find("m\">")
                end = Vul_notice_all.find("</p>")
                if start != -1 and end != -1:
                    Vul_notice = Vul_notice + Vul_notice_all[start + 3:end]
                    Vul_notice_all = Vul_notice_all[end + 4:len(Vul_notice_all)]
                while len(Vul_notice_all) > 0:
                    start = Vul_notice_all.find("g\">")
                    end = Vul_notice_all.find("</p>")
                    if start != -1 and end != -1:
                        Vul_notice = Vul_notice + Vul_notice_all[start + 3:end]
                        Vul_notice_all = Vul_notice_all[end+4:len(Vul_notice_all)]
                        start = Vul_descript_all.find("g\">")
                        end = Vul_descript_all.find("</div>")
                        if start != -1 and end != -1 and start > end:
                            break
                    else:
                        break
                if len(Vul_notice) == 0:
                    Vul_notice = UserConfig.OSSVUL_VULNERABILITYNOTICE_DEFAULT
            # 存储Vul信息
            Vulinfo = [Vul_name, Vul_CVEID, UserConfig.OSSVUL_VULNERABILITYCNVDID_DEFAULT,
                       Vul_CNNVDID, Vul_risk, Vul_descript, Vul_releasedate, Vul_Updatedate,
                       Vul_notice, Vul_type, Vul_threattype]
            # print(Vulinfo)
            for lib_info in list:
                name = lib_info[1]
                # print(name, Vul_descript)
                name = re.escape(name)
                isinclude = re.search(name, Vul_descript, re.IGNORECASE)
                if len(Vul_descript) > 0 and isinclude:
                    if "kernel" in name:
                        islinux = re.search("linux", Vul_descript, re.IGNORECASE)
                        if islinux:
                            isallowwrite = bool(1)
                        else:
                            isallowwrite = bool(0)
                    else:
                        isallowwrite = bool(1)
                    #写入漏洞模板
                    if CheckWordUniq(name, Vul_descript) and isallowwrite:
                        # 判断更新时间是否小于6个月
                        if FileOperation.CheckUpdateTime(Vulinfo) <= UserConfig.SEARCH_TIMESPAN:
                            writefile_name = UserConfig.OSSVULFILE_PATH
                            print(Vulinfo)
                            FileOperation.writeVulinfo(writefile_name, lib_info, Vulinfo, 'CNNVD')
        else:
            print(f'{txtFolder}/{txtfile} seems not to be an Excelfile')

#收集CNVD数据 by wu_t2 2022-08-01
def DealCNVDData(list):
    xmlFolder = UserConfig.CNVD_DIRECTORY_PATH
    xmlFiles = os.listdir(xmlFolder)
    totalsize = len(xmlFiles)
    i = 0
    # file_path = 'C:/FOSS/CNVD_download/2022-07-18_2022-07-24.xml'
    for file in xmlFiles:
        i = i + 1
        print("Collecting No." + str(i) + ", total is " + str(totalsize))
        if file.endswith('.xml'):
            file_path = xmlFolder + file
            root = etree.parse(file_path).getroot()
            for child in root.getchildren():
                Vul_CVEID = UserConfig.OSSVUL_VULNERABILITYCVEID_DEFAULT
                Vul_risk = UserConfig.OSSVUL_VULNERABILITYRISK_DEFAULT
                Vul_Updatedate = UserConfig.OSSVUL_VULNERABILITYUPDATETIME_DEFAULT
                Vul_notice = UserConfig.OSSVUL_VULNERABILITYNOTICE_DEFAULT
                Vul_type = UserConfig.OSSVUL_VULNERABILITYTYPE_DEFAULT
                Vul_releasedate = UserConfig.OSSVUL_VULNERABILITYRELEASETIME_DEFAULT
                # 获取漏洞名字，CVEID, CNVDID, CNNVDID,漏洞风险,漏洞描述，发布时间,更新时间,补丁公告,漏洞类型
                # print(etree.tostring(child))
                title = child.find("title")
                number = child.find("number")
                if child.find("cves") is not None:
                    cves = child.find("cves")
                    if cves.find("cve") is not None:
                        cve = cves.find("cve")
                        if cve.find("cveNumber") is not None:
                            cveNumber = cve.find("cveNumber")
                            Vul_CVEID = cveNumber.text
                serverity = child.find("serverity")
                description = child.find("description")
                submitTime = child.find("submitTime")
                openTime = child.find("openTime")
                formalWay = child.find("formalWay")
                isEvent = child.find("isEvent")
                Vul_name = title.text
                Vul_CNVDID = number.text
                if serverity is not None:
                    Vul_risk = serverity.text
                Vul_descript = description.text
                if submitTime is not None:
                    Vul_releasedate = submitTime.text
                if openTime is not None:
                    Vul_Updatedate = openTime.text
                if formalWay is not None:
                    Vul_notice = formalWay.text
                if isEvent is not None:
                    Vul_type = isEvent.text
                if len(Vul_CVEID) == 0:
                    Vul_CVEID = UserConfig.OSSVUL_VULNERABILITYCVEID_DEFAULT
                if len(Vul_risk) == 0:
                    Vul_risk = UserConfig.OSSVUL_VULNERABILITYRISK_DEFAULT
                if len(Vul_Updatedate) == 0:
                    Vul_Updatedate = UserConfig.OSSVUL_VULNERABILITYUPDATETIME_DEFAULT
                if len(Vul_notice) == 0:
                    Vul_notice = UserConfig.OSSVUL_VULNERABILITYNOTICE_DEFAULT
                if len(Vul_type) == 0:
                    Vul_type = UserConfig.OSSVUL_VULNERABILITYTYPE_DEFAULT
                if len(Vul_releasedate) == 0:
                    Vul_releasedate = UserConfig.OSSVUL_VULNERABILITYRELEASETIME_DEFAULT
                Vulinfo = [Vul_name, Vul_CVEID, Vul_CNVDID, UserConfig.OSSVUL_VULNERABILITYCNNVDID_DEFAULT,
                           Vul_risk, Vul_descript, Vul_releasedate, Vul_Updatedate, Vul_notice, Vul_type,
                           UserConfig.OSSVUL_VULNERABILITYTHREAT_DEFAULT]
                # print(Vulinfo)
                for lib_info in list:
                    name = lib_info[1]
                    name = re.escape(name)
                    isinclude = re.search(name, Vul_descript, re.IGNORECASE)
                    if len(Vul_descript) > 0 and isinclude:
                        if "kernel" in name:
                            islinux = re.search("linux", Vul_descript, re.IGNORECASE)
                            if islinux:
                                isallowwrite = bool(1)
                            else:
                                isallowwrite = bool(0)
                        else:
                            isallowwrite = bool(1)
                        #写入漏洞模板
                        if CheckWordUniq(name, Vul_descript) and isallowwrite:
                            # 判断更新时间是否小于6个月
                            if FileOperation.CheckUpdateTime(Vulinfo) <= UserConfig.SEARCH_TIMESPAN:
                                writefile_name = UserConfig.OSSVULFILE_PATH
                                FileOperation.writeVulinfo(writefile_name, lib_info, Vulinfo, 'CNVD')
                        # else:
                        #     print(f'{name}/{Vul_descript}Not a related vulnerability')
        else:
            print(f'{xmlFolder}/{file} seems not to be an Excelfile')

#NVD by wu_t2 2022-08-01
def DealNVDData(list):
    for lib_info in list:
        name = lib_info[0]
        print(name)
        if(name is not None):
            # NVD的link
            url = UserConfig.SEARCH_NVDKEYWORD_LINK + name + "&search_type=all&isCpeNameSearch=false&hyperlink_types=US-CERT+Technical+Alerts%2CUS-CERT+Vulnerability+Notes%2COVAL+Queries"
            try:
                U = requote_uri(url)
                page = urlopen(U)
                content = page.read().decode("utf-8")
                soup = BeautifulSoup(content, 'html.parser')
                for a in soup.find_all('a', text=re.compile('CVE-')):
                    b = a.text.replace("None", "")
                    print(b)
                    url_nvd = UserConfig.SEARCH_NVDID_LINK + b
                    Vulinfo = SpiderOperation.serchNVDinfo(url_nvd, b)
                    # print(Vulinfo)
                    if Vulinfo is not None:
                        #判断更新时间是否小于6个月
                        if FileOperation.CheckUpdateTime(Vulinfo) <= UserConfig.SEARCH_TIMESPAN:
                            writefile_name = UserConfig.OSSVULFILE_PATH
                            FileOperation.writeVulinfo(writefile_name, lib_info, Vulinfo, 'NVD')
            except:
                print("the" + url + "can not be reached")
                pass

#热词爬虫CVE by wu_t2 2022-08-01
def DealCVEData(list):
    for lib_info in list:
        name = lib_info[0]
        print(name)
        if(name is not None):
            # CVE的link
            url = UserConfig.SEARCH_CVEKEYWORD_LINK + name
            U = requote_uri(url)
            try:
                page = urlopen(U)
                content = page.read().decode("utf-8")
                soup = BeautifulSoup(content, 'html.parser')
                for a in soup.find_all('a', text=re.compile('CVE-')):
                    b = a.text.replace("None", "")
                    # print(b)
                    url_cve = UserConfig.SEARCH_CVEID_LINK + b
                    Vulinfo = SpiderOperation.serchCVEinfo(url_cve, b)
                    # print(Vulinfo)
                    if Vulinfo is not None:
                        #判断更新时间是否小于6个月
                        if FileOperation.CheckUpdateTime(Vulinfo) <= UserConfig.SEARCH_TIMESPAN:
                            writefile_name = UserConfig.OSSVULFILE_PATH
                            FileOperation.writeVulinfo(writefile_name, lib_info, Vulinfo, 'CVE')
            except:
                print("the" + U + "can not be reached")
                pass


#CVE数据包获取数据 by wu_t2 2022-08-01
def DealCVEData_ByXML(list):
    xmlFolder = UserConfig.CVE_DIRECTORY_PATH
    xmlFiles = os.listdir(xmlFolder)
    totalsize = len(xmlFiles)
    i = 0
    # file_path = 'C:/FOSS/CNVD_download/2022-07-18_2022-07-24.xml'
    for file in xmlFiles:
        i = i + 1
        print("Collecting No." + str(i) + ", total is" + str(totalsize))
        if file.endswith('.xml'):
            file_path = xmlFolder + file
            root = etree.parse(file_path).getroot()
            print(file_path)
            for child in root.getchildren():
                if 'Vulnerability' in child.tag:
                    Vul_descript = UserConfig.OSSVUL_VULNERABILITYDESCRIB_DEFAULT
                    Vul_releasedate = UserConfig.OSSVUL_VULNERABILITYRELEASETIME_DEFAULT
                    Vul_Updatedate = UserConfig.OSSVUL_VULNERABILITYUPDATETIME_DEFAULT
                    Vul_notice = UserConfig.OSSVUL_VULNERABILITYNOTICE_DEFAULT
                    Vul_CVEID = UserConfig.OSSVUL_VULNERABILITYCVEID_DEFAULT
                    # 获取漏洞名字，CVEID, CNVDID, CNNVDID,漏洞风险,漏洞描述，发布时间,更新时间,补丁公告,漏洞类型
                    for vul_info in child:
                        # print(vul_info.tag)
                        if 'Notes' in vul_info.tag:
                            for note in vul_info:
                                Ordinal = note.attrib.get('Ordinal')
                                if Ordinal == '1':
                                    Vul_descript = note.text
                                elif Ordinal == '2':
                                    Vul_releasedate = note.text
                                elif Ordinal == '3':
                                    Vul_Updatedate = note.text
                        elif 'CVE' in vul_info.tag:
                            Vul_CVEID = vul_info.text
                        elif 'References' in vul_info.tag:
                            Vul_notice = ''
                            for refer in vul_info:
                                Vul_notice = Vul_notice + refer[1].text + '\n'
                            if len(Vul_notice) < 5:
                                Vul_notice = UserConfig.OSSVUL_VULNERABILITYNOTICE_DEFAULT
                    Vulinfo = [UserConfig.OSSVUL_VULNERABILITYNAME_DEFAULT, Vul_CVEID, UserConfig.OSSVUL_VULNERABILITYCNVDID_DEFAULT,
                               UserConfig.OSSVUL_VULNERABILITYCNNVDID_DEFAULT, UserConfig.OSSVUL_VULNERABILITYRISK_DEFAULT, Vul_descript,
                               Vul_releasedate, Vul_Updatedate, Vul_notice, UserConfig.OSSVUL_VULNERABILITYTYPE_DEFAULT,
                               UserConfig.OSSVUL_VULNERABILITYTHREAT_DEFAULT]
                    # print(Vulinfo)
                    for lib_info in list:
                        name = lib_info[1]
                        name = re.escape(name)
                        isinclude = re.search(name, Vul_descript, re.IGNORECASE)
                        if len(Vul_descript) > 0 and isinclude:
                            if "kernel" in name:
                                islinux = re.search("linux", Vul_descript, re.IGNORECASE)
                                if islinux:
                                    isallowwrite = bool(1)
                                else:
                                    isallowwrite = bool(0)
                            else:
                                isallowwrite = bool(1)
                            #写入漏洞模板
                            if CheckWordUniq(name, Vul_descript) and isallowwrite:
                                # 判断更新时间是否小于6个月
                                if FileOperation.CheckUpdateTime(Vulinfo) <= UserConfig.SEARCH_TIMESPAN:
                                    writefile_name = UserConfig.OSSVULFILE_PATH
                                    FileOperation.writeVulinfo(writefile_name, lib_info, Vulinfo, 'CVE')
                            # else:
                            #     print(f'{name}/{Vul_descript}Not a related vulnerability')
        else:
            print(f'{xmlFolder}/{file} seems not to be an Excelfile')

#NVD数据包获取数据 by wu_t2 2022-08-01
def DealNVDData_ByJSON(list):
    jsonFolder = UserConfig.NVD_DIRECTORY_PATH
    jsonFiles = os.listdir(jsonFolder)
    totalsize = len(jsonFiles)
    i = 0
    # file_path = 'C:/FOSS/CNVD_download/2022-07-18_2022-07-24.xml'
    for file in jsonFiles:
        i = i + 1
        print("Collecting No." + str(i) + ", total is " + str(totalsize))
        if file.endswith('.json'):
            file_path = jsonFolder + file
            f = open(file_path, encoding="utf-8")
            jsonfile = json.load(f)
            print(file_path)
            NVDitems = jsonfile["CVE_Items"]
            for item in NVDitems:
                Vul_descript = UserConfig.OSSVUL_VULNERABILITYDESCRIB_DEFAULT
                Vul_releasedate = UserConfig.OSSVUL_VULNERABILITYRELEASETIME_DEFAULT
                Vul_Updatedate = UserConfig.OSSVUL_VULNERABILITYUPDATETIME_DEFAULT
                Vul_notice = UserConfig.OSSVUL_VULNERABILITYNOTICE_DEFAULT
                Vul_CVEID = UserConfig.OSSVUL_VULNERABILITYCVEID_DEFAULT
                Vul_risk  = UserConfig.OSSVUL_VULNERABILITYRISK_DEFAULT
                cve_info  =  item["cve"]
                if "description" in cve_info and cve_info["description"]["description_data"] is not None:
                    describ = cve_info["description"]["description_data"]
                    Vul_descript = describ[0]["value"]
                if "CVE_data_meta" in cve_info and cve_info["CVE_data_meta"]["ID"] is not None:
                    Vul_CVEID = cve_info["CVE_data_meta"]["ID"]
                if "references" in cve_info and cve_info["references"]["reference_data"] is not None:
                    Vul_notice = ''
                    for refer in cve_info["references"]["reference_data"]:
                        if refer["name"] != "N/A":
                            Vul_notice = Vul_notice + refer["name"] + '\n'
                        elif refer["url"] != "N/A":
                            Vul_notice = Vul_notice + refer["url"] + '\n'
                    if len(Vul_notice) < 5:
                        Vul_notice = UserConfig.OSSVUL_VULNERABILITYNOTICE_DEFAULT
                impact = item["impact"]
                if "baseMetricV3" in impact:
                    if impact["baseMetricV3"] is not None and \
                       impact["baseMetricV3"]["cvssV3"] is not None and \
                       impact["baseMetricV3"]["cvssV3"]["baseScore"] is not None:
                        Vul_risk = str(impact["baseMetricV3"]["cvssV3"]["baseScore"]) + ' ' + impact["baseMetricV3"]["cvssV3"]["baseSeverity"]
                    elif impact["baseMetricV2"] is not None and \
                       impact["baseMetricV2"]["cvssV2"] is not None and \
                       impact["baseMetricV2"]["cvssV2"]["baseScore"] is not None:
                        Vul_risk = str(impact["baseMetricV2"]["cvssV2"]["baseScore"]) + ' ' + impact["baseMetricV2"]["severity"]
                if "publishedDate" in item and item["publishedDate"] is not None:
                    subtime = item["publishedDate"]
                    Vul_releasedate = subtime[0:10]
                if "lastModifiedDate" in item and item["lastModifiedDate"] is not None:
                    updatetime = item["lastModifiedDate"]
                    Vul_Updatedate = updatetime[0:10]
                Vulinfo = [UserConfig.OSSVUL_VULNERABILITYNAME_DEFAULT, Vul_CVEID, UserConfig.OSSVUL_VULNERABILITYCNVDID_DEFAULT,
                           UserConfig.OSSVUL_VULNERABILITYCNNVDID_DEFAULT, Vul_risk, Vul_descript,
                           Vul_releasedate, Vul_Updatedate, Vul_notice, UserConfig.OSSVUL_VULNERABILITYTYPE_DEFAULT,
                           UserConfig.OSSVUL_VULNERABILITYTHREAT_DEFAULT]
                for lib_info in list:
                    name = lib_info[1]
                    name = re.escape(name)
                    isinclude = re.search(name, Vul_descript, re.IGNORECASE)
                    if len(Vul_descript) > 0 and isinclude:
                        if "kernel" in name:
                            islinux = re.search("linux", Vul_descript, re.IGNORECASE)
                            if islinux:
                                isallowwrite = bool(1)
                            else:
                                isallowwrite = bool(0)
                        else:
                            isallowwrite = bool(1)
                        #写入漏洞模板
                        if CheckWordUniq(name, Vul_descript) and isallowwrite:
                            # 判断更新时间是否小于6个月
                            if FileOperation.CheckUpdateTime(Vulinfo) <= UserConfig.SEARCH_TIMESPAN:
                                writefile_name = UserConfig.OSSVULFILE_PATH
                                FileOperation.writeVulinfo(writefile_name, lib_info, Vulinfo, 'NVD')
                        # else:
                        #     print(f'{name}/{Vul_descript}Not a related vulnerability')
        else:
            print(f'{jsonFolder}/{file} seems not to be an Excelfile')