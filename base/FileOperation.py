import openpyxl
from datetime import datetime
import WebsIteHandle.Config_Setting as UserConfig
from openpyxl.styles import PatternFill

# current time
time = datetime.now()

#具体的读取操作 by wu_t2 2022-08-14
def getvulinfo(sheet, row):
    foss_product_name = sheet.cell(row, UserConfig.OSSVULPRODUCTNAME_COL).value
    foss_name = sheet.cell(row, UserConfig.OSSVULNAME_COL).value
    foss_verion = sheet.cell(row, UserConfig.OSSVULNAMEVERSION_COL).value
    foss_link = sheet.cell(row, UserConfig.OSSVULNAMELINK_COL).value
    foss_license = sheet.cell(row, UserConfig.OSSVULNAMELICENSE_COL).value
    foss_linklicense = sheet.cell(row, UserConfig.OSSVULNAMELICENSELINK_COL).value
    foss_copyright = sheet.cell(row, UserConfig.OSSVULNAMECOPYRIGHT_COL).value
    foss_usage = sheet.cell(row, UserConfig.OSSVULNAMEUSAGE_COL).value
    foss_tyeoflink = sheet.cell(row, UserConfig.OSSVULNAMETYPEOFLINK_COL).value
    vul_name = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYNAME_COL).value   # 漏洞名称
    vul_source = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYSOURCE_COL).value
    vul_cveid = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYCVEID_COL).value   # CVEID
    vul_cnvdid = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYCNVDID_COL).value # CNVDID
    vul_cnnvdid = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYCNNVDID_COL).value   # CNNVDID
    vul_risk = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYRISK_COL).value # 漏洞风险
    vul_describe = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYDESCRIB_COL).value # 漏洞描述
    vul_releasetime = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYRELEASETIME_COL).value  # 发布时间
    vul_updatetime = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYUPDATETIME_COL).value  # 更新时间
    vul_notice = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYNOTICE_COL).value  # 补丁公告
    vul_type = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYTYPE_COL).value   # 漏洞类型
    vul_threat = sheet.cell(row, UserConfig.OSSVUL_VULNERABILITYTHREAT_COL).value  # 威胁类型
    describeinfo = '产品名称: ' + str(foss_product_name) + '\n' + \
                   '组件名称: ' + str(foss_name) + '\n' + \
                   '组件版本: ' + str(foss_verion) + '\n' + \
                   '组件link: ' + str(foss_link) + '\n' + \
                   '组件license: ' + str(foss_license) + '\n' + \
                   '组件license link: ' + str(foss_linklicense) + '\n' + \
                   '组件copyright: ' + str(foss_copyright) + '\n' + \
                   '组件使用方式: ' + str(foss_usage) + '\n' + \
                   '组件链接方式: ' + str(foss_tyeoflink) + '\n' + \
                   '漏洞名称: ' + str(vul_name) + '\n' + \
                   '漏洞来源: ' + str(vul_source) + '\n' + \
                   'cveid: ' + str(vul_cveid) + '\n' + \
                   'cnvdid: ' + str(vul_cnvdid) + '\n' + \
                   'cnnvdid: ' + str(vul_cnnvdid) + '\n' + \
                   '漏洞风险: ' + str(vul_risk) + '\n' + \
                   '漏洞描述: ' + str(vul_describe) + '\n' + \
                   '漏洞释放时间: ' + str(vul_releasetime) + '\n' + \
                   '漏洞更新时间: ' + str(vul_updatetime) + '\n' + \
                   '漏洞公告: ' + str(vul_notice) + '\n' + \
                   '漏洞类型: ' + str(vul_type) + '\n' + \
                   '漏洞威胁类型: ' + str(vul_threat)

    vulinfo = [foss_product_name, foss_name, foss_verion, foss_link, foss_license, foss_linklicense, foss_copyright, foss_usage, foss_tyeoflink,
               vul_name, vul_source, vul_cveid, vul_cnvdid, vul_cnnvdid, vul_risk, vul_describe, vul_releasetime, vul_updatetime, vul_notice, vul_type, vul_threat, describeinfo]
    return vulinfo

#具体的读取操作 by wu_t2 2022-08-01
def getlibinfo(sheet, row):
    lib_product_name = sheet.cell(row, UserConfig.FOSSPRODUCTNAME_COL).value
    lib_name = sheet.cell(row, UserConfig.FOSSNAME_COL).value
    lib_verion = sheet.cell(row, UserConfig.FOSSNAMEVERSION_COL).value
    lib_link = sheet.cell(row, UserConfig.FOSSNAMELINK_COL).value
    lib_license = sheet.cell(row, UserConfig.FFOSSNAMELICENSE_COL).value
    lib_linklicense = sheet.cell(row, UserConfig.FOSSNAMELICENSELINK_COL).value
    lib_copyright = sheet.cell(row, UserConfig.FOSSNAMECOPYRIGHT_COL).value
    lib_usage = sheet.cell(row, UserConfig.FOSSNAMEUSAGE_COL).value
    lib_tyeoflink = sheet.cell(row, UserConfig.FOSSNAMETYPEOFLINK_COL).value
    lib_info_list = [lib_product_name, lib_name, lib_verion, lib_link, lib_license, lib_linklicense, lib_copyright, lib_usage, lib_tyeoflink]
    return lib_info_list

#读出FOSS中的外部库数据 by wu_t2 2022-08-01
def readlibname(name):

    table = openpyxl.load_workbook(name)
    FOSS_sheet = table[UserConfig.FOSSSHEET_NAME]
    lib_info = getlibinfo(FOSS_sheet, UserConfig.FOSSDATASTART_RAW)

    lib_list = []
    i = 0
    while lib_info[0] is not None:
        lib_list.append(lib_info)
        i = i+1
        lib_info = getlibinfo(FOSS_sheet, UserConfig.FOSSDATASTART_RAW + i)
    return lib_list

#查重CVE号以及更新时间或者发布时间 by wu_t2 2022-08-01
def Vul_Duplicatecheck(cveid_src, cveid_dst, last_time_src, last_time_dst, lib_name_src, lib_name_dst):
    if cveid_src == cveid_dst and lib_name_src == lib_name_dst:
        time_month = int(last_time_src[5:7], 10)
        time_day = int(last_time_src[8:10], 10)
        time_year = int(last_time_src[0:4], 10)
        lasttime_src = datetime(time_year, time_month, time_day)
        time_month = int(last_time_dst[5:7], 10)
        time_day = int(last_time_dst[8:10], 10)
        time_year = int(last_time_dst[0:4], 10)
        lasttime_dst = datetime(time_year, time_month, time_day)
        time_compare = (lasttime_dst - lasttime_src).days
        if time_compare > 0:
            return bool(1)
        else:
            return bool(0)
    else:
        return bool(0)

#写入漏洞数据 by wu_t2 2022-08-01
def writeVulinfo(file_name, lib_info, vul_info, source_from):
    writexl = openpyxl.load_workbook(file_name)
    sheet = writexl[UserConfig.OSSVULSHEET_NAME]
    i = 3
    isolddata = bool(0)
    isupdatedata = bool(0)
    # 查重更新，可能需要标记个红色
    while sheet.cell(i, UserConfig.OSSVULNUMBER_COL).value is not None:
        cveid_src = sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCVEID_COL).value
        if sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYUPDATETIME_COL).value == "no Update time":
            last_time_src = sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYRELEASETIME_COL).value
        else:
            last_time_src = sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYUPDATETIME_COL).value
        lib_name_src = sheet.cell(i, UserConfig.OSSVULNAME_COL).value
        cveid_dst = vul_info[1]
        if vul_info[7] == "no Update time":
            last_time_dst = vul_info[6]
        else:
            last_time_dst = vul_info[7]
        lib_name_dst = lib_info[1]

        if Vul_Duplicatecheck(cveid_src, cveid_dst, last_time_src, last_time_dst, lib_name_src, lib_name_dst):
            fille = PatternFill("solid", fgColor="00FF00")
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCVEID_COL).fill = fille
            isolddata = bool(0)
            isupdatedata = bool(1)
            break
        else:
            #若鉴别不是最新的信息，1如果是CVE和NVD检索的跳出写入,2原来数据是CVE必定重写，否则时间相同重写数据
            if cveid_src == cveid_dst and lib_name_src == lib_name_dst:
                if source_from != "CVE" and source_from != "NVD" and last_time_src == last_time_dst:
                    isolddata = bool(0)
                    fille = PatternFill("solid", fgColor="00FF00")
                    sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCVEID_COL).fill = fille
                    print("cnvd or cnnvd detected, rewriting data")
                    break
                elif sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYSOURCE_COL).value == "CVE" and last_time_src == last_time_dst:
                    isolddata = bool(0)
                    fille = PatternFill("solid", fgColor="00FF00")
                    sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCVEID_COL).fill = fille
                    print("source data is CVE, rewriting data")
                    break
                else:
                    isolddata = bool(1)
                    print("detected " + cveid_src + " is old data")
                    print(lib_info[1])
                    break
        i = i+1
    if isolddata == bool(0):
        sheet.cell(i, UserConfig.OSSVULNUMBER_COL).value = i-2
        sheet.cell(i, UserConfig.OSSVULCURRENTTIME_COL).value = time.strftime('%Y-%m-%d')
        sheet.cell(i, UserConfig.OSSVULPRODUCTNAME_COL).value = lib_info[0]  #产品名称
        sheet.cell(i, UserConfig.OSSVULNAME_COL).value = lib_info[1]  #组件名称
        sheet.cell(i, UserConfig.OSSVULNAMEVERSION_COL).value = lib_info[2]  #组件版本
        sheet.cell(i, UserConfig.OSSVULNAMELINK_COL).value = lib_info[3]  #组件链接
        sheet.cell(i, UserConfig.OSSVULNAMELICENSE_COL).value = lib_info[4]  #许可
        sheet.cell(i, UserConfig.OSSVULNAMELICENSELINK_COL).value = lib_info[5]  #许可链接
        sheet.cell(i, UserConfig.OSSVULNAMECOPYRIGHT_COL).value = lib_info[6]  #版本信息
        sheet.cell(i, UserConfig.OSSVULNAMEUSAGE_COL).value = lib_info[7]  #使用类型
        sheet.cell(i, UserConfig.OSSVULNAMETYPEOFLINK_COL).value = lib_info[8]  #使用链接方式
        sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYNAME_COL).value = vul_info[0]  # 漏洞名称
        sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYSOURCE_COL).value = source_from
        sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCVEID_COL).value = vul_info[1]  #CVEID
        if isupdatedata == bool(0):
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCNVDID_COL).value = vul_info[2]  #CNVDID
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCNNVDID_COL).value = vul_info[3]  #CNNVDID
        sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYRISK_COL).value = vul_info[4]  #漏洞风险
        sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYDESCRIB_COL).value = vul_info[5]  #漏洞描述
        sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYRELEASETIME_COL).value = vul_info[6]  #发布时间
        sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYUPDATETIME_COL).value = vul_info[7]  #更新时间
        sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYNOTICE_COL).value = vul_info[8]  #补丁公告
        sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYTYPE_COL).value = vul_info[9]  #漏洞类型
        sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYTHREAT_COL).value = vul_info[10] #威胁类型
    else:
        #可能检索的不是最新的版本，但是有些内容在CVE上不全，对其进行补充
        if sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYNAME_COL).value == UserConfig.OSSVUL_VULNERABILITYNAME_DEFAULT:
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYNAME_COL).value = vul_info[0]  # 漏洞名称
        if sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCNVDID_COL).value == UserConfig.OSSVUL_VULNERABILITYCNVDID_DEFAULT:
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCNVDID_COL).value = vul_info[2]  # CNVDID
        if sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCNNVDID_COL).value == UserConfig.OSSVUL_VULNERABILITYCNNVDID_DEFAULT:
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYCNNVDID_COL).value = vul_info[3]  # CNNVDID
        if sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYRISK_COL).value == UserConfig.OSSVUL_VULNERABILITYRISK_DEFAULT:
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYRISK_COL).value = vul_info[4]  # 漏洞风险
        if sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYDESCRIB_COL).value == UserConfig.OSSVUL_VULNERABILITYDESCRIB_DEFAULT:
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYDESCRIB_COL).value = vul_info[5]  # 漏洞描述
        if sheet.cell(i,UserConfig.OSSVUL_VULNERABILITYRELEASETIME_COL).value == UserConfig.OSSVUL_VULNERABILITYRELEASETIME_DEFAULT:
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYRELEASETIME_COL).value = vul_info[6]  # 发布时间
        if sheet.cell(i,UserConfig.OSSVUL_VULNERABILITYUPDATETIME_COL).value == UserConfig.OSSVUL_VULNERABILITYUPDATETIME_DEFAULT:
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYUPDATETIME_COL).value = vul_info[7]  # 更新时间
        if sheet.cell(i,UserConfig.OSSVUL_VULNERABILITYNOTICE_COL).value == UserConfig.OSSVUL_VULNERABILITYNOTICE_DEFAULT:
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYNOTICE_COL).value = vul_info[8]  # 补丁公告
        if sheet.cell(i,UserConfig.OSSVUL_VULNERABILITYTYPE_COL).value == UserConfig.OSSVUL_VULNERABILITYTYPE_DEFAULT:
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYTYPE_COL).value = vul_info[9]  # 漏洞类型
        if sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYTHREAT_COL).value == UserConfig.OSSVUL_VULNERABILITYTHREAT_DEFAULT:
            sheet.cell(i, UserConfig.OSSVUL_VULNERABILITYTHREAT_COL).value = vul_info[10]  # 威胁类型
    writexl.save(file_name)

#检查更新时间跨度 by wu_t2 2022-08-01
def CheckUpdateTime(Vulinfo):
    tmptime = Vulinfo[7]
    if tmptime != UserConfig.OSSVUL_VULNERABILITYUPDATETIME_DEFAULT:
        time_month = int(tmptime[5:7], 10)
        time_day = int(tmptime[8:10], 10)
        time_year = int(tmptime[0:4], 10)
        Updatetime = datetime(time_year, time_month, time_day)
        return (time - Updatetime).days
    else:
        tmptime = Vulinfo[6]
        time_month = int(tmptime[5:7], 10)
        time_day = int(tmptime[8:10], 10)
        time_year = int(tmptime[0:4], 10)
        Updatetime = datetime(time_year, time_month, time_day)
        return (time - Updatetime).days


# 获取OSSVUL内信息
def GetVulinfo(file_name):
    writexl = openpyxl.load_workbook(file_name)
    sheet = writexl[UserConfig.OSSVULSHEET_NAME]

    vulinfo_list = []
    i = 3
    while sheet.cell(i, UserConfig.OSSVULNUMBER_COL).value is not None:
        vulinfo = getvulinfo(sheet, i)
        vulinfo_list.append(vulinfo)
        i = i + 1
    return vulinfo_list

# 写入JIRA EXCEL内
def writeVulinfo2JIRA(file_name, vulinfo_list):
    writexl = openpyxl.load_workbook(file_name)
    sheet = writexl[UserConfig.EXCEL2JIRA_NAME]
    # mixsize = len(vulinfo_list)
    i = 2
    for vulinfo in vulinfo_list:
        print(str(vulinfo))
        sheet.cell(i, UserConfig.JIRA_PROJECT_COL).value = 'CNSDEFECT'
        sheet.cell(i, UserConfig.JIRA_ISSUETYPE_COL).value = 'INT Defect'
        sheet.cell(i, UserConfig.JIRA_SUMMARY_COL).value = '[CNS3.0 37W SOP1][CSMS]' + str(vulinfo[1]) + ' ' + str(vulinfo[11])
        sheet.cell(i, UserConfig.JIRA_TEAMDEVELOPMENT_COL).value = UserConfig.JIRA_Teamdevelopment_VALUE #Software Quality Assurance 114
        sheet.cell(i, UserConfig.JIRA_FUNCTIONALITY_COL).value = UserConfig.JIRA_Functionality_VALUE
        sheet.cell(i, UserConfig.JIRA_ASSIGNEE_COL).value = UserConfig.JIRA_ASSIGNE_VALUE
        sheet.cell(i, UserConfig.JIRA_TEAMTEST_COL).value = UserConfig.JIRA_Teamtest_VALUE
        sheet.cell(i, UserConfig.JIRA_BUGFOUNDBY_COL).value = UserConfig.JIRA_Bugfoundby_VALUE
        sheet.cell(i, UserConfig.JIRA_DESCRIPTION_COL).value = vulinfo[21]
        sheet.cell(i, UserConfig.JIRA_REPRODUCIBILITY_COL).value = UserConfig.JIRA_Reproducibility_VALUE
        if 'unknown' in vulinfo[14]:
            sheet.cell(i, UserConfig.JIRA_SEVERITY_COL).value = 'block'
        elif 'LOW' in vulinfo[14] or '低危' in vulinfo[14]:
            sheet.cell(i, UserConfig.JIRA_SEVERITY_COL).value = 'low'
        elif 'MEDIUM' in vulinfo[14] or '中危' or '中' in vulinfo[14]:
            sheet.cell(i, UserConfig.JIRA_SEVERITY_COL).value = 'medium'
        elif 'HIGH' in vulinfo[14] or '高' in vulinfo[14] or 'CRITICAL' in vulinfo[14] or '超' in vulinfo[14]:
            sheet.cell(i, UserConfig.JIRA_SEVERITY_COL).value = 'high'
        sheet.cell(i, UserConfig.JIRA_MANUFACTURERVARIANT_COL).value = '295' #5HG 035 866 (Online_China) - JPCC
        sheet.cell(i, UserConfig.JIRA_FOUNDINSW_COL).value = '339511' #C363-RC6 - CNS_37w
        sheet.cell(i, UserConfig.JIRA_FOUNDINHW_COL).value = 'null'
        sheet.cell(i, UserConfig.JIRA_LABELS_COL).value = 'CSMS 37WSOP1 MOBSOP1 MQBSOP1.5'
        i = i + 1
    writexl.save(file_name)


    while sheet.cell(i, UserConfig.OSSVULNUMBER_COL).value is not None:
        vulinfo = getvulinfo(sheet, i)
        vulinfo_list.append(vulinfo)
        i = i + 1
    return vulinfo_list